/**
 *
 * @module themes
 *
 */
import type { StyleOptions, ThemeOptions } from '@primeuix/styled';

import type { AccordionDesignTokens } from '@primeuix/themes/types/accordion';
import type { AutoCompleteDesignTokens } from '@primeuix/themes/types/autocomplete';
import type { AvatarDesignTokens } from '@primeuix/themes/types/avatar';
import type { BadgeDesignTokens } from '@primeuix/themes/types/badge';
import type { BlockUIDesignTokens } from '@primeuix/themes/types/blockui';
import type { BreadcrumbDesignTokens } from '@primeuix/themes/types/breadcrumb';
import type { ButtonDesignTokens } from '@primeuix/themes/types/button';
import type { CardDesignTokens } from '@primeuix/themes/types/card';
import type { CarouselDesignTokens } from '@primeuix/themes/types/carousel';
import type { CascadeSelectDesignTokens } from '@primeuix/themes/types/cascadeselect';
import type { CheckboxDesignTokens } from '@primeuix/themes/types/checkbox';
import type { ChipDesignTokens } from '@primeuix/themes/types/chip';
import type { ColorPickerDesignTokens } from '@primeuix/themes/types/colorpicker';
import type { ConfirmDialogDesignTokens } from '@primeuix/themes/types/confirmdialog';
import type { ConfirmPopupDesignTokens } from '@primeuix/themes/types/confirmpopup';
import type { ContextMenuDesignTokens } from '@primeuix/themes/types/contextmenu';
import type { DataTableDesignTokens } from '@primeuix/themes/types/datatable';
import type { DataViewDesignTokens } from '@primeuix/themes/types/dataview';
import type { DatePickerDesignTokens } from '@primeuix/themes/types/datepicker';
import type { DialogDesignTokens } from '@primeuix/themes/types/dialog';
import type { DividerDesignTokens } from '@primeuix/themes/types/divider';
import type { DockDesignTokens } from '@primeuix/themes/types/dock';
import type { DrawerDesignTokens } from '@primeuix/themes/types/drawer';
import type { EditorDesignTokens } from '@primeuix/themes/types/editor';
import type { FieldsetDesignTokens } from '@primeuix/themes/types/fieldset';
import type { FileUploadDesignTokens } from '@primeuix/themes/types/fileupload';
import type { FloatLabelDesignTokens } from '@primeuix/themes/types/floatlabel';
import type { GalleriaDesignTokens } from '@primeuix/themes/types/galleria';
import type { IconFieldDesignTokens } from '@primeuix/themes/types/iconfield';
import type { IftaLabelDesignTokens } from '@primeuix/themes/types/iftalabel';
import type { ImageDesignTokens } from '@primeuix/themes/types/image';
import type { ImageCompareDesignTokens } from '@primeuix/themes/types/imagecompare';
import type { InlineMessageDesignTokens } from '@primeuix/themes/types/inlinemessage';
import type { InplaceDesignTokens } from '@primeuix/themes/types/inplace';
import type { InputChipsDesignTokens } from '@primeuix/themes/types/inputchips';
import type { InputGroupDesignTokens } from '@primeuix/themes/types/inputgroup';
import type { InputNumberDesignTokens } from '@primeuix/themes/types/inputnumber';
import type { InputOtpDesignTokens } from '@primeuix/themes/types/inputotp';
import type { InputTextDesignTokens } from '@primeuix/themes/types/inputtext';
import type { KnobDesignTokens } from '@primeuix/themes/types/knob';
import type { ListboxDesignTokens } from '@primeuix/themes/types/listbox';
import type { MegaMenuDesignTokens } from '@primeuix/themes/types/megamenu';
import type { MenuDesignTokens } from '@primeuix/themes/types/menu';
import type { MenubarDesignTokens } from '@primeuix/themes/types/menubar';
import type { MessageDesignTokens } from '@primeuix/themes/types/message';
import type { MeterGroupDesignTokens } from '@primeuix/themes/types/metergroup';
import type { MultiSelectDesignTokens } from '@primeuix/themes/types/multiselect';
import type { OrderListDesignTokens } from '@primeuix/themes/types/orderlist';
import type { OrganizationChartDesignTokens } from '@primeuix/themes/types/organizationchart';
import type { OverlayBadgeDesignTokens } from '@primeuix/themes/types/overlaybadge';
import type { PaginatorDesignTokens } from '@primeuix/themes/types/paginator';
import type { PanelDesignTokens } from '@primeuix/themes/types/panel';
import type { PanelMenuDesignTokens } from '@primeuix/themes/types/panelmenu';
import type { PasswordDesignTokens } from '@primeuix/themes/types/password';
import type { PickListDesignTokens } from '@primeuix/themes/types/picklist';
import type { PopoverDesignTokens } from '@primeuix/themes/types/popover';
import type { ProgressBarDesignTokens } from '@primeuix/themes/types/progressbar';
import type { ProgressSpinnerDesignTokens } from '@primeuix/themes/types/progressspinner';
import type { RadioButtonDesignTokens } from '@primeuix/themes/types/radiobutton';
import type { RatingDesignTokens } from '@primeuix/themes/types/rating';
import type { RippleDesignTokens } from '@primeuix/themes/types/ripple';
import type { ScrollPanelDesignTokens } from '@primeuix/themes/types/scrollpanel';
import type { SelectDesignTokens } from '@primeuix/themes/types/select';
import type { SelectButtonDesignTokens } from '@primeuix/themes/types/selectbutton';
import type { SkeletonDesignTokens } from '@primeuix/themes/types/skeleton';
import type { SliderDesignTokens } from '@primeuix/themes/types/slider';
import type { SpeedDialDesignTokens } from '@primeuix/themes/types/speeddial';
import type { SplitButtonDesignTokens } from '@primeuix/themes/types/splitbutton';
import type { SplitterDesignTokens } from '@primeuix/themes/types/splitter';
import type { StepperDesignTokens } from '@primeuix/themes/types/stepper';
import type { StepsDesignTokens } from '@primeuix/themes/types/steps';
import type { TabmenuDesignTokens } from '@primeuix/themes/types/tabmenu';
import type { TabsDesignTokens } from '@primeuix/themes/types/tabs';
import type { TabViewDesignTokens } from '@primeuix/themes/types/tabview';
import type { TagDesignTokens } from '@primeuix/themes/types/tag';
import type { TerminalDesignTokens } from '@primeuix/themes/types/terminal';
import type { TextareaDesignTokens } from '@primeuix/themes/types/textarea';
import type { TieredMenuDesignTokens } from '@primeuix/themes/types/tieredmenu';
import type { TimelineDesignTokens } from '@primeuix/themes/types/timeline';
import type { ToastDesignTokens } from '@primeuix/themes/types/toast';
import type { ToggleButtonDesignTokens } from '@primeuix/themes/types/togglebutton';
import type { ToggleSwitchDesignTokens } from '@primeuix/themes/types/toggleswitch';
import type { ToolbarDesignTokens } from '@primeuix/themes/types/toolbar';
import type { TooltipDesignTokens } from '@primeuix/themes/types/tooltip';
import type { TreeDesignTokens } from '@primeuix/themes/types/tree';
import type { TreeSelectDesignTokens } from '@primeuix/themes/types/treeselect';
import type { TreeTableDesignTokens } from '@primeuix/themes/types/treetable';
import type { VirtualScrollerDesignTokens } from '@primeuix/themes/types/virtualscroller';

export interface ColorScheme<T> {
    light?: Omit<T, 'colorScheme' | 'extend' | 'css'>;
    dark?: Omit<T, 'colorScheme' | 'extend' | 'css'>;
}

export interface ColorSchemeDesignToken<T> {
    colorScheme?: ColorScheme<T>;
}

export declare type ExtendedCSS = string | ((options: StyleOptions) => string) | undefined;
export declare type ExtendedTokens = Record<string, object | string | number>;

export interface DesignTokens<T> extends ColorSchemeDesignToken<T> {
    css?: ExtendedCSS;
    extend?: ExtendedTokens;
}

export declare type RequiredDesignTokens<T, C = never> = {
    [K in keyof Omit<T, keyof DesignTokens<T>>]-?: DeepRequired<T[K]>;
} & DesignTokens<T> &
    (C extends never ? object : ColorSchemeDesignToken<C>);

export interface PaletteDesignToken {
    0?: string;
    50?: string;
    100?: string;
    200?: string;
    300?: string;
    400?: string;
    500?: string;
    600?: string;
    700?: string;
    800?: string;
    900?: string;
    950?: string;
}

export interface ComponentsDesignTokens {
    accordion?: AccordionDesignTokens;
    autocomplete?: AutoCompleteDesignTokens;
    avatar?: AvatarDesignTokens;
    badge?: BadgeDesignTokens;
    blockui?: BlockUIDesignTokens;
    breadcrumb?: BreadcrumbDesignTokens;
    button?: ButtonDesignTokens;
    card?: CardDesignTokens;
    carousel?: CarouselDesignTokens;
    cascadeselect?: CascadeSelectDesignTokens;
    checkbox?: CheckboxDesignTokens;
    chip?: ChipDesignTokens;
    colorpicker?: ColorPickerDesignTokens;
    confirmdialog?: ConfirmDialogDesignTokens;
    confirmpopup?: ConfirmPopupDesignTokens;
    contextmenu?: ContextMenuDesignTokens;
    datatable?: DataTableDesignTokens;
    dataview?: DataViewDesignTokens;
    datepicker?: DatePickerDesignTokens;
    dialog?: DialogDesignTokens;
    divider?: DividerDesignTokens;
    dock?: DockDesignTokens;
    drawer?: DrawerDesignTokens;
    editor?: EditorDesignTokens;
    fieldset?: FieldsetDesignTokens;
    fileupload?: FileUploadDesignTokens;
    floatlabel?: FloatLabelDesignTokens;
    galleria?: GalleriaDesignTokens;
    iconfield?: IconFieldDesignTokens;
    iftalabel?: IftaLabelDesignTokens;
    image?: ImageDesignTokens;
    imagecompare?: ImageCompareDesignTokens;
    inlinemessage?: InlineMessageDesignTokens;
    inplace?: InplaceDesignTokens;
    inputchips?: InputChipsDesignTokens;
    inputgroup?: InputGroupDesignTokens;
    inputnumber?: InputNumberDesignTokens;
    inputotp?: InputOtpDesignTokens;
    inputtext?: InputTextDesignTokens;
    knob?: KnobDesignTokens;
    listbox?: ListboxDesignTokens;
    megamenu?: MegaMenuDesignTokens;
    menu?: MenuDesignTokens;
    menubar?: MenubarDesignTokens;
    message?: MessageDesignTokens;
    metergroup?: MeterGroupDesignTokens;
    multiselect?: MultiSelectDesignTokens;
    orderlist?: OrderListDesignTokens;
    organizationchart?: OrganizationChartDesignTokens;
    overlaybadge?: OverlayBadgeDesignTokens;
    paginator?: PaginatorDesignTokens;
    panel?: PanelDesignTokens;
    panelmenu?: PanelMenuDesignTokens;
    password?: PasswordDesignTokens;
    picklist?: PickListDesignTokens;
    popover?: PopoverDesignTokens;
    progressbar?: ProgressBarDesignTokens;
    progressspinner?: ProgressSpinnerDesignTokens;
    radiobutton?: RadioButtonDesignTokens;
    rating?: RatingDesignTokens;
    ripple?: RippleDesignTokens;
    scrollpanel?: ScrollPanelDesignTokens;
    select?: SelectDesignTokens;
    selectbutton?: SelectButtonDesignTokens;
    skeleton?: SkeletonDesignTokens;
    slider?: SliderDesignTokens;
    speeddial?: SpeedDialDesignTokens;
    splitbutton?: SplitButtonDesignTokens;
    splitter?: SplitterDesignTokens;
    stepper?: StepperDesignTokens;
    steps?: StepsDesignTokens;
    tabmenu?: TabmenuDesignTokens;
    tabs?: TabsDesignTokens;
    tabview?: TabViewDesignTokens;
    tag?: TagDesignTokens;
    terminal?: TerminalDesignTokens;
    textarea?: TextareaDesignTokens;
    tieredmenu?: TieredMenuDesignTokens;
    timeline?: TimelineDesignTokens;
    toast?: ToastDesignTokens;
    togglebutton?: ToggleButtonDesignTokens;
    toggleswitch?: ToggleSwitchDesignTokens;
    toolbar?: ToolbarDesignTokens;
    tooltip?: TooltipDesignTokens;
    tree?: TreeDesignTokens;
    treeselect?: TreeSelectDesignTokens;
    treetable?: TreeTableDesignTokens;
    virtualscroller?: VirtualScrollerDesignTokens;
    [key: PropertyKey]: object | string | number | undefined;
}

export declare type BaseDesignTokens<T extends Partial<{ primitive: unknown; semantic: unknown }> = object> = {
    primitive?: T extends { primitive?: infer P } ? P : undefined;
    semantic?: T extends { semantic?: infer S } ? S : undefined;
};

export declare type Preset<T = object> = BaseDesignTokens<T> & {
    components?: ComponentsDesignTokens;
    extend?: ExtendedTokens;
    css?: ExtendedCSS;
    [key: PropertyKey]: object | string | number | undefined;
};

export declare type Theme = { preset?: Preset; options?: ThemeOptions };

/**
 * Custom types
 */
export declare type DeepRequired<T> = T extends object ? { [K in keyof T]-?: DeepRequired<T[K]> } : T;
