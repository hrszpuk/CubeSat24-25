{
  "version": 3,
  "sources": ["../../src/terminal/style/TerminalStyle.js", "../../src/terminal/BaseTerminal.vue", "../../src/terminal/Terminal.vue", "../../src/terminal/Terminal.vue"],
  "sourcesContent": ["import { style } from '@primeuix/styles/terminal';\nimport BaseStyle from '@primevue/core/base/style';\n\nconst classes = {\n    root: 'p-terminal p-component',\n    welcomeMessage: 'p-terminal-welcome-message',\n    commandList: 'p-terminal-command-list',\n    command: 'p-terminal-command',\n    commandValue: 'p-terminal-command-value',\n    commandResponse: 'p-terminal-command-response',\n    prompt: 'p-terminal-prompt',\n    promptLabel: 'p-terminal-prompt-label',\n    promptValue: 'p-terminal-prompt-value'\n};\n\nexport default BaseStyle.extend({\n    name: 'terminal',\n    style,\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TerminalStyle from 'primevue/terminal/style';\n\nexport default {\n    name: 'BaseTerminal',\n    extends: BaseComponent,\n    props: {\n        welcomeMessage: {\n            type: String,\n            default: null\n        },\n        prompt: {\n            type: String,\n            default: null\n        }\n    },\n    style: TerminalStyle,\n    provide() {\n        return {\n            $pcTerminal: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" @click=\"onClick\" v-bind=\"ptmi('root')\">\n        <div v-if=\"welcomeMessage\" :class=\"cx('welcomeMessage')\" v-bind=\"ptm('welcomeMessage')\">{{ welcomeMessage }}</div>\n        <div :class=\"cx('commandList')\" v-bind=\"ptm('content')\">\n            <div v-for=\"(command, i) of commands\" :key=\"command.text + i.toString()\" :class=\"cx('command')\" v-bind=\"ptm('commands')\">\n                <span :class=\"cx('promptLabel')\" v-bind=\"ptm('prompt')\">{{ prompt }}</span>\n                <span :class=\"cx('commandValue')\" v-bind=\"ptm('command')\">{{ command.text }}</span>\n                <div :class=\"cx('commandResponse')\" aria-live=\"polite\" v-bind=\"ptm('response')\">{{ command.response }}</div>\n            </div>\n        </div>\n        <div :class=\"cx('prompt')\" v-bind=\"ptm('container')\">\n            <span :class=\"cx('promptLabel')\" v-bind=\"ptm('prompt')\">{{ prompt }}</span>\n            <input ref=\"input\" v-model=\"commandText\" :class=\"cx('promptValue')\" type=\"text\" autocomplete=\"off\" @keydown=\"onKeydown\" v-bind=\"ptm('commandText')\" />\n        </div>\n    </div>\n</template>\n\n<script>\nimport TerminalService from 'primevue/terminalservice';\nimport BaseTerminal from './BaseTerminal.vue';\n\nexport default {\n    name: 'Terminal',\n    extends: BaseTerminal,\n    inheritAttrs: false,\n    data() {\n        return {\n            commandText: null,\n            commands: []\n        };\n    },\n    mounted() {\n        TerminalService.on('response', this.responseListener);\n        this.$refs.input.focus();\n    },\n    updated() {\n        this.$el.scrollTop = this.$el.scrollHeight;\n    },\n    beforeUnmount() {\n        TerminalService.off('response', this.responseListener);\n    },\n    methods: {\n        onClick() {\n            this.$refs.input.focus();\n        },\n        onKeydown(event) {\n            if (event.key === 'Enter' && this.commandText) {\n                this.commands.push({ text: this.commandText });\n                TerminalService.emit('command', this.commandText);\n                this.commandText = '';\n            }\n        },\n        responseListener(response) {\n            this.commands[this.commands.length - 1].response = response;\n        }\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" @click=\"onClick\" v-bind=\"ptmi('root')\">\n        <div v-if=\"welcomeMessage\" :class=\"cx('welcomeMessage')\" v-bind=\"ptm('welcomeMessage')\">{{ welcomeMessage }}</div>\n        <div :class=\"cx('commandList')\" v-bind=\"ptm('content')\">\n            <div v-for=\"(command, i) of commands\" :key=\"command.text + i.toString()\" :class=\"cx('command')\" v-bind=\"ptm('commands')\">\n                <span :class=\"cx('promptLabel')\" v-bind=\"ptm('prompt')\">{{ prompt }}</span>\n                <span :class=\"cx('commandValue')\" v-bind=\"ptm('command')\">{{ command.text }}</span>\n                <div :class=\"cx('commandResponse')\" aria-live=\"polite\" v-bind=\"ptm('response')\">{{ command.response }}</div>\n            </div>\n        </div>\n        <div :class=\"cx('prompt')\" v-bind=\"ptm('container')\">\n            <span :class=\"cx('promptLabel')\" v-bind=\"ptm('prompt')\">{{ prompt }}</span>\n            <input ref=\"input\" v-model=\"commandText\" :class=\"cx('promptValue')\" type=\"text\" autocomplete=\"off\" @keydown=\"onKeydown\" v-bind=\"ptm('commandText')\" />\n        </div>\n    </div>\n</template>\n\n<script>\nimport TerminalService from 'primevue/terminalservice';\nimport BaseTerminal from './BaseTerminal.vue';\n\nexport default {\n    name: 'Terminal',\n    extends: BaseTerminal,\n    inheritAttrs: false,\n    data() {\n        return {\n            commandText: null,\n            commands: []\n        };\n    },\n    mounted() {\n        TerminalService.on('response', this.responseListener);\n        this.$refs.input.focus();\n    },\n    updated() {\n        this.$el.scrollTop = this.$el.scrollHeight;\n    },\n    beforeUnmount() {\n        TerminalService.off('response', this.responseListener);\n    },\n    methods: {\n        onClick() {\n            this.$refs.input.focus();\n        },\n        onKeydown(event) {\n            if (event.key === 'Enter' && this.commandText) {\n                this.commands.push({ text: this.commandText });\n                TerminalService.emit('command', this.commandText);\n                this.commandText = '';\n            }\n        },\n        responseListener(response) {\n            this.commands[this.commands.length - 1].response = response;\n        }\n    }\n};\n</script>\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,UAAU;EACZC,MAAM;EACNC,gBAAgB;EAChBC,aAAa;EACbC,SAAS;EACTC,cAAc;EACdC,iBAAiB;EACjBC,QAAQ;EACRC,aAAa;EACbC,aAAa;AACjB;AAEA,IAAA,gBAAeC,UAAUC,OAAO;EAC5BC,MAAM;EACNC;EACAb;AACJ,CAAC;;;ACfD,IAAA,WAAe;EACXc,MAAM;EACN,WAASC;EACTC,OAAO;IACHC,gBAAgB;MACZC,MAAMC;MACN,WAAS;;IAEbC,QAAQ;MACJF,MAAMC;MACN,WAAS;IACb;;EAEJE,OAAOC;EACPC,SAAO,SAAPA,UAAU;AACN,WAAO;MACHC,aAAa;MACbC,iBAAiB;;EAEzB;AACJ;ACHA,IAAAC,UAAe;EACXZ,MAAM;EACN,WAASa;EACTC,cAAc;EACdC,MAAI,SAAJA,OAAO;AACH,WAAO;MACHC,aAAa;MACbC,UAAU,CAAA;;;EAGlBC,SAAO,SAAPA,UAAU;AACNC,oBAAgBC,GAAG,YAAY,KAAKC,gBAAgB;AACpD,SAAKC,MAAMC,MAAMC,MAAK;;EAE1BC,SAAO,SAAPA,UAAU;AACN,SAAKC,IAAIC,YAAY,KAAKD,IAAIE;;EAElCC,eAAa,SAAbA,gBAAgB;AACZV,oBAAgBW,IAAI,YAAY,KAAKT,gBAAgB;;EAEzDU,SAAS;IACLC,SAAO,SAAPA,UAAU;AACN,WAAKV,MAAMC,MAAMC,MAAK;;IAE1BS,WAAAA,SAAAA,UAAUC,OAAO;AACb,UAAIA,MAAMC,QAAQ,WAAW,KAAKnB,aAAa;AAC3C,aAAKC,SAASmB,KAAK;UAAEC,MAAM,KAAKrB;QAAY,CAAC;AAC7CG,wBAAgBmB,KAAK,WAAW,KAAKtB,WAAW;AAChD,aAAKA,cAAc;MACvB;;IAEJK,kBAAAA,SAAAA,iBAAiBkB,UAAU;AACvB,WAAKtB,SAAS,KAAKA,SAASuB,SAAS,CAAC,EAAED,WAAWA;IACvD;EACJ;AACJ;;ACvDI,SAAAE,UAAA,GAAAC,mBAaK,OAbLC,WAaK;IAbC,SAAOC,KAAEC,GAAA,MAAA;IAAWb,SAAK,OAAA,CAAA,MAAA,OAAA,CAAA,IAAA,WAAA;aAAEc,SAAOd,WAAAc,SAAAd,QAAAe,MAAAD,UAAAE,SAAA;;KAAUJ,KAAIK,KAAA,MAAA,CAAA,GAAA,CACvCL,KAAczC,kBAAzBsC,UAAA,GAAAC,mBAAiH,OAAjHC,WAAiH;;IAArF,SAAOC,KAAEC,GAAA,gBAAA;EAA4B,GAAAD,KAAAM,IAAG,gBAAA,CAAA,GAAA,gBAAuBN,KAAezC,cAAA,GAAA,EAAA,KAAA,mBAAA,IAAA,IAAA,GAC1GgD,gBAMK,OANLR,WAMK;IANC,SAAOC,KAAEC,GAAA,aAAA;KAAyBD,KAAGM,IAAA,SAAA,CAAA,GAAA,EACvCT,UAAA,IAAA,GAAAC,mBAIKU,UAJuB,MAAAC,WAAAC,MAAArC,UAAf,SAAAsC,SAASC,GAAC;AAAvB,WAAAf,UAAA,GAAAC,mBAIK,OAJLC,WAIK;MAJkCR,KAAKoB,QAAQlB,OAAOmB,EAAEC,SAAQ;MAAK,SAAOb,KAAEC,GAAA,SAAA;;;OAAqBD,KAAGM,IAAA,UAAA,CAAA,GAAA,CACvGC,gBAA0E,QAA1ER,WAA0E;MAAnE,SAAOC,KAAEC,GAAA,aAAA;IAAyB,GAAA;MAAAa,SAAA;OAAAd,KAAAM,IAAG,QAAA,CAAA,GAAA,gBAAeN,KAAKtC,MAAA,GAAA,EAAA,GAChE6C,gBAAkF,QAAlFR,WAAkF;MAA3E,SAAOC,KAAEC,GAAA,cAAA;;;OAA0BD,KAAGM,IAAA,SAAA,CAAA,GAAAS,gBAAgBJ,QAAQlB,IAAK,GAAA,EAAA,GAC1Ec,gBAA2G,OAA3GR,WAA2G;MAArG,SAAOC,KAAEC,GAAA,iBAAA;MAAqB,aAAU;;;OAAiBD,KAAGM,IAAA,UAAA,CAAA,GAAAS,gBAAiBJ,QAAQhB,QAAS,GAAA,EAAA,CAAA,GAAA,EAAA;mBAG5GY,gBAGK,OAHLR,WAGK;IAHC,SAAOC,KAAEC,GAAA,QAAA;KAAoBD,KAAGM,IAAA,WAAA,CAAA,GAAA,CAClCC,gBAA0E,QAA1ER,WAA0E;IAAnE,SAAOC,KAAEC,GAAA,aAAA;KAAyBD,KAAAM,IAAG,QAAA,CAAA,GAAA,gBAAeN,KAAKtC,MAAA,GAAA,EAAA,GAChEsD,eAAAT,gBAAqJ,SAArJR,WAAqJ;IAA9IkB,KAAI;;aAAiBP,MAAWtC,cAAA8C;IAAA;IAAG,SAAOlB,KAAEC,GAAA,aAAA;IAAiBzC,MAAK;IAAO2D,cAAa;IAAO9B,WAAO,OAAA,CAAA,MAAA,OAAA,CAAA,IAAA,WAAA;aAAEa,SAASb,aAAAa,SAAAb,UAAAc,MAAAD,UAAAE,SAAA;;KAAUJ,KAAGM,IAAA,aAAA,CAAA,GAAA,MAAA,EAAA,GAAA,CAAA,CAAA,YAAvGI,MAAWtC,WAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,GAAA,EAAA;;;",
  "names": ["classes", "root", "welcomeMessage", "commandList", "command", "commandValue", "commandResponse", "prompt", "promptLabel", "promptValue", "BaseStyle", "extend", "name", "style", "name", "BaseComponent", "props", "welcomeMessage", "type", "String", "prompt", "style", "TerminalStyle", "provide", "$pcTerminal", "$parentInstance", "script", "BaseTerminal", "inheritAttrs", "data", "commandText", "commands", "mounted", "TerminalService", "on", "responseListener", "$refs", "input", "focus", "updated", "$el", "scrollTop", "scrollHeight", "beforeUnmount", "off", "methods", "onClick", "onKeydown", "event", "key", "push", "text", "emit", "response", "length", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "$options", "apply", "arguments", "ptmi", "ptm", "_createElementVNode", "_Fragment", "_renderList", "$data", "command", "i", "toString", "ref_for", "_toDisplayString", "_withDirectives", "ref", "$event", "autocomplete"]
}
